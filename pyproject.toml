[tool.poetry]
name = "workshop"
version = "0.1.0"
description = ""
authors = ["Francis G Goncalves <fguedes13@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
pydantic-ai = {extras = ["logfire"], version = "^0.0.12"}
typer = "^0.15.1"
python-dotenv = "^1.0.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.21.0"
pytest-xdist = "^3.3.1"  # For parallel test execution

[tool.poetry.group.dev.dependencies]
black = "^24.2.0"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pytest-watch = "^4.2.0"
ipykernel = "^6.29.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --cov=ai_toolkit --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["ai_toolkit"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
]
show_missing = true
fail_under = 80

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.logfire]
ignore_no_config = true
